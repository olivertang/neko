'use client'
import { isWalletBookPopulated, getWalletBookWallet } from '@dynamic-labs/wallet-book';
import { logger } from '../logger.js';
import '@dynamic-labs/utils';
import '../../../_virtual/_tslib.js';
import { getIconUrl } from './getIconUrl/getIconUrl.js';
import { getValidHexColor } from './getValidHexColor/getValidHexColor.js';
import { getDeepLinks } from './getDeepLinks/getDeepLinks.js';
import { getDownloadLinks } from './getDownloadLinks/getDownloadLinks.js';
import { getWalletLimitations } from './getWalletLimitations/getWalletLimitations.js';

const getWalletMetadataFromWalletBook = ({ walletKey, walletBookWallet, walletBook, walletFallback, }) => {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!isWalletBookPopulated(walletBook) && !walletFallback) {
        logger.warn('Wallet book is required');
        return;
    }
    try {
        const wallet = walletBookWallet !== null && walletBookWallet !== void 0 ? walletBookWallet : getWalletBookWallet(walletBook, walletKey, walletFallback);
        // if no walletBookWallet is provided and no wallet is found in the wallet book, throw an error
        if (!wallet) {
            logger.warn('Wallet not found in wallet book');
            return;
        }
        return {
            brandColor: getValidHexColor((_a = wallet === null || wallet === void 0 ? void 0 : wallet.brand) === null || _a === void 0 ? void 0 : _a.primaryColor),
            deepLinks: getDeepLinks({
                desktop: wallet === null || wallet === void 0 ? void 0 : wallet.desktop,
                mobile: wallet === null || wallet === void 0 ? void 0 : wallet.mobile,
            }),
            downloadLinks: getDownloadLinks(wallet),
            groupKey: (_b = wallet === null || wallet === void 0 ? void 0 : wallet.chainGroup) !== null && _b !== void 0 ? _b : wallet === null || wallet === void 0 ? void 0 : wallet.walletGroup,
            icon: (_d = getIconUrl((_c = wallet === null || wallet === void 0 ? void 0 : wallet.brand) === null || _c === void 0 ? void 0 : _c.spriteId)) !== null && _d !== void 0 ? _d : '',
            id: walletKey,
            inAppBrowserUrl: (_f = (_e = wallet.mobile) === null || _e === void 0 ? void 0 : _e.inAppBrowser) !== null && _f !== void 0 ? _f : undefined,
            name: wallet.name,
            rdns: (_g = wallet.eip6963Config) === null || _g === void 0 ? void 0 : _g.rdns,
            supportedHardwareWallets: wallet.hardwareWallets,
            walletLimitations: getWalletLimitations(wallet.walletLimitations),
        };
    }
    catch (e) {
        logger.warn('Error getting wallet metadata from wallet book', {
            error: e,
        });
        return;
    }
};

export { getWalletMetadataFromWalletBook };
