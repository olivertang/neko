import EventEmitter from 'eventemitter3';
import { WalletConnectorCore } from '../types';
export declare const Chains: readonly ["ETH", "FLOW", "SOL", "EVM", "ALGO", "STARK", "ATOM", "COSMOS", "BTC", "ECLIPSE"];
export type Chain = typeof Chains[number];
export declare const socialProviders: readonly ["google", "facebook", "apple", "github", "bitbucket", "gitlab", "linkedin", "twitter", "discord", "twitch", "microsoft"];
export type SocialProvider = typeof socialProviders[number];
export type PayloadParams = {
    params: {
        accounts: string[];
        chainId: number;
        message: string;
    }[];
};
export type GetAddressOpts = {
    chainId?: string;
    onConnect?(payload: PayloadParams): void;
    onDesktopUri?(uri: string): void;
    onDisplayUri?(uri: string): void;
};
export type NameServiceData = {
    avatar?: string;
    name?: string;
};
export type InternalWalletConnector = WalletConnectorCore.WalletConnector;
export type WalletConnector = Pick<InternalWalletConnector, 'canConnectViaCustodialService' | 'canConnectViaQrCode' | 'canConnectViaSocial' | 'chainRpcProviders' | 'connect' | 'connectedChain' | 'createWallet' | 'constructorProps' | 'endSession' | 'getAddress' | 'getAdditionalAddresses' | 'getConnectedAccounts' | 'getDeepLink' | 'getMobileOrInstalledWallet' | 'getNetwork' | 'getSession' | 'initEventListener' | 'isAvailable' | 'isEmbeddedWallet' | 'isInitialized' | 'isInstalledOnBrowser' | 'isTestnet' | 'isWalletConnect' | 'key' | 'metadata' | 'name' | 'parseAddress' | 'proveOwnership' | 'providerResources' | 'supportedChains' | 'supportsNetworkSwitching' | 'switchNetwork' | 'switchNetworkOnlyFromWallet' | 'teardownEventListeners'> & EventEmitter<WalletConnectorEventTypes>;
export interface WalletConnectorConstructor {
    new (props?: any): InternalWalletConnector;
}
export type WalletConnectorsMethod = (props?: any) => WalletConnectorConstructor[];
export type WalletConnectorEventTypes = {
    chainChange: (props: {
        chain: string;
    }) => void;
    accountChange: (props: {
        accounts: string[];
    }) => void;
    disconnect: () => void;
};
export interface WalletConnectorExtension {
    extend(connector: InternalWalletConnector, settings?: {
        walletConnectDappProjectId?: string;
    }): void;
    name: string;
}
export type ChainChangeEventHandler = (chainId: string | number) => Promise<void>;
export type DisconnectEventHandler = (error?: {
    code: number;
}) => Promise<void>;
export type ChainInfo = {
    blockchainName: string;
    displayName: string;
    name: string;
    symbol: Chain;
};
