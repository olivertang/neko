'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';

/**
 * Decrypts an encrypted message using AES-GCM encryption with a shared secret key.
 *
 * @param sharedSecret - The shared secret key in hexadecimal format
 * @param message - The encrypted message in base64 format
 * @param iv - The initialization vector in hexadecimal format
 * @returns A Promise that resolves to the decrypted message as a string
 */
const decryptMessage = (sharedSecret, message, iv) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const decoder = new TextDecoder();
    const sharedSecretByteArray = new Uint8Array((_b = (_a = decodeURIComponent(sharedSecret)
        .match(/.{1,2}/g)) === null || _a === void 0 ? void 0 : _a.map((byte) => parseInt(byte, 16))) !== null && _b !== void 0 ? _b : []);
    // Import the ArrayBuffer as a CryptoKey
    const sharedSecretCryptoKey = yield crypto.subtle.importKey('raw', sharedSecretByteArray.buffer, 'AES-GCM', true, ['encrypt', 'decrypt']);
    const decryptedData = yield crypto.subtle.decrypt({ iv: hexToUint8Array(decodeURIComponent(iv)), name: 'AES-GCM' }, sharedSecretCryptoKey, base64ToArrayBuffer(decodeURIComponent(message)));
    return decoder.decode(new Uint8Array(decryptedData));
});
const hexToUint8Array = (hex) => {
    if (hex.length % 2 !== 0) {
        throw new Error('Hex string must have an even number of characters');
    }
    if (!/^[0-9A-Fa-f]+$/.test(hex)) {
        throw new Error('Invalid hex characters');
    }
    const bytes = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
        bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);
    }
    return bytes;
};
const base64ToArrayBuffer = (base64) => {
    const binaryString = atob(base64);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
};

export { decryptMessage };
