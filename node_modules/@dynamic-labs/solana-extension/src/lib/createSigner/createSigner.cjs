'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var web3_js = require('@solana/web3.js');
var messageTransport = require('@dynamic-labs/message-transport');
var solanaCore = require('@dynamic-labs/solana-core');

const createSigner = ({ wallet, core, }) => {
    const solanaRequestChannel = messageTransport.createRequestChannel(core.messageTransport);
    return {
        publicKey: new web3_js.PublicKey(wallet.address),
        signAllTransactions: (transactions) => solanaRequestChannel
            .request('solana_signAllTransactions', {
            encodedTransactions: transactions.map(solanaCore.encodeTransactionToBase64),
            walletId: wallet.id,
        })
            .then(({ encodedTransactions }) => encodedTransactions.map(solanaCore.decodeTransactionFromBase64)),
        signAndSendTransaction: (transaction, options) => solanaRequestChannel.request('solana_signAndSendTransaction', {
            encodedTransaction: solanaCore.encodeTransactionToBase64(transaction),
            options,
            walletId: wallet.id,
        }),
        signMessage: (message) => solanaRequestChannel
            .request('solana_signMessage', {
            message: new TextDecoder().decode(message),
            walletId: wallet.id,
        })
            .then(({ signature }) => ({
            signature: new TextEncoder().encode(signature),
        })),
        signTransaction: (transaction) => solanaRequestChannel
            .request('solana_signTransaction', {
            encodedTransaction: solanaCore.encodeTransactionToBase64(transaction),
            walletId: wallet.id,
        })
            .then(({ encodedTransaction }) => solanaCore.decodeTransactionFromBase64(encodedTransaction)),
    };
};

exports.createSigner = createSigner;
