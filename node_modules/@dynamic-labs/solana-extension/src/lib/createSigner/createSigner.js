'use client'
import { PublicKey } from '@solana/web3.js';
import { createRequestChannel } from '@dynamic-labs/message-transport';
import { encodeTransactionToBase64, decodeTransactionFromBase64 } from '@dynamic-labs/solana-core';

const createSigner = ({ wallet, core, }) => {
    const solanaRequestChannel = createRequestChannel(core.messageTransport);
    return {
        publicKey: new PublicKey(wallet.address),
        signAllTransactions: (transactions) => solanaRequestChannel
            .request('solana_signAllTransactions', {
            encodedTransactions: transactions.map(encodeTransactionToBase64),
            walletId: wallet.id,
        })
            .then(({ encodedTransactions }) => encodedTransactions.map(decodeTransactionFromBase64)),
        signAndSendTransaction: (transaction, options) => solanaRequestChannel.request('solana_signAndSendTransaction', {
            encodedTransaction: encodeTransactionToBase64(transaction),
            options,
            walletId: wallet.id,
        }),
        signMessage: (message) => solanaRequestChannel
            .request('solana_signMessage', {
            message: new TextDecoder().decode(message),
            walletId: wallet.id,
        })
            .then(({ signature }) => ({
            signature: new TextEncoder().encode(signature),
        })),
        signTransaction: (transaction) => solanaRequestChannel
            .request('solana_signTransaction', {
            encodedTransaction: encodeTransactionToBase64(transaction),
            walletId: wallet.id,
        })
            .then(({ encodedTransaction }) => decodeTransactionFromBase64(encodedTransaction)),
    };
};

export { createSigner };
