import { BaseWallet } from '@dynamic-labs/types';
export type WalletsModuleState = {
    userWallets: BaseWallet[];
    primary: BaseWallet | null;
};
export type WalletsModuleMessages = {
    getBalance: (params: {
        wallet: BaseWallet;
    }) => Promise<{
        balance: string;
    }>;
    signMessage: (params: {
        wallet: BaseWallet;
        message: string;
    }) => Promise<{
        signedMessage: string;
    }>;
    getNetwork: (params: {
        wallet: BaseWallet;
    }) => Promise<{
        network: string | number;
    }>;
    switchNetwork: (params: {
        wallet: BaseWallet;
        chainId: string | number;
    }) => Promise<void>;
    setPrimary: (params: {
        walletId: string;
    }) => Promise<void>;
    onWalletEvent: (params: WalletEventArguments & {
        walletId: string;
    }) => void;
    handleConnectedWallet: (wallet: Partial<BaseWallet>) => Promise<boolean>;
    messageSigned: (params: {
        messageToSign: string;
        signedMessage: string;
    }) => void;
    walletAdded: (params: {
        wallet: BaseWallet;
        userWallets: BaseWallet[];
    }) => void;
    walletRemoved: (params: {
        wallet: BaseWallet;
        userWallets: BaseWallet[];
    }) => void;
};
export type WalletEvents = {
    chainChange: (props: {
        chain: string;
    }) => void;
};
type WalletEventArguments = {
    [E in keyof WalletEvents]: {
        event: E;
        eventParams: Parameters<WalletEvents[E]>;
    };
}[keyof WalletEvents];
export declare const userWalletsEventNames: ("messageSigned" | "walletAdded" | "walletRemoved")[];
export {};
