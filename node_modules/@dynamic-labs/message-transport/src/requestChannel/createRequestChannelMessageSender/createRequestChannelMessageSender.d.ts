/// <reference types="node" />
import { MessageTransportData, WithBlock } from '../../messageTransport';
import { MessageTransportWithDefaultOrigin } from '../../messageTransport/decorators/applyDefaultMessageOrigin/applyDefaultMessageOrigin';
import { RequestTypes } from '../types';
type RequestChannelMessageSenderParams<T extends RequestTypes, K extends Extract<keyof T, string>> = {
    requestType: K;
    messageSessionId: string;
    timeoutMap: Record<string, NodeJS.Timer>;
    onReceiveAck?: VoidFunction;
    onTimeout: VoidFunction;
    messageTransport: MessageTransportWithDefaultOrigin | WithBlock<MessageTransportWithDefaultOrigin>;
    params: Parameters<T[K]>;
};
export declare const createRequestChannelMessageSender: <T extends RequestTypes, K extends Extract<keyof T, string>>({ requestType, messageSessionId, timeoutMap, onReceiveAck, messageTransport, onTimeout, params, }: RequestChannelMessageSenderParams<T, K>) => {
    handleAckMessage: ({ messageSessionId: incomingSessionId, type: incomingType, }: MessageTransportData) => void;
    sendMessage: () => void;
};
export {};
