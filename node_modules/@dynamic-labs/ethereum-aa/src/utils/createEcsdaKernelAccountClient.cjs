'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var accounts = require('@zerodev/sdk/accounts');
var clients = require('@zerodev/sdk/clients');
var viem = require('viem');

const getZeroDevBundlerRPC = (projectId, provider) => {
    let rpc = `https://rpc.zerodev.app/api/v2/bundler/${projectId}`;
    if (provider) {
        rpc += `?bundlerProvider=${provider}`;
    }
    return rpc;
};
const getZeroDevPaymasterRPC = (projectId, provider) => {
    let rpc = `https://rpc.zerodev.app/api/v2/paymaster/${projectId}`;
    if (provider) {
        rpc += `?paymasterProvider=${provider}`;
    }
    return rpc;
};
const isERC20 = (value) => viem.isAddress(value);
const createEcdsaKernelAccountClient = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ bundlerRpc, chain, paymasterRpc, projectId, signer, provider, index, paymaster = 'SPONSOR', entryPointAddress, kernelVersion, ecdsaValidator, }) {
    const resolvedBundlerRpc = bundlerRpc !== null && bundlerRpc !== void 0 ? bundlerRpc : getZeroDevBundlerRPC(projectId, provider);
    const resolvedPaymasterRpc = paymasterRpc !== null && paymasterRpc !== void 0 ? paymasterRpc : getZeroDevPaymasterRPC(projectId, provider);
    const publicClient = viem.createPublicClient({
        chain,
        transport: viem.http(resolvedBundlerRpc),
    });
    const validator = yield ecdsaValidator(publicClient, {
        entryPoint: entryPointAddress,
        kernelVersion,
        signer,
    });
    const account = yield accounts.createKernelAccount(publicClient, {
        entryPoint: entryPointAddress,
        index,
        kernelVersion,
        plugins: {
            sudo: validator,
        },
    });
    const zerodevPaymaster = clients.createZeroDevPaymasterClient({
        chain: chain,
        entryPoint: entryPointAddress,
        transport: viem.http(resolvedPaymasterRpc),
    });
    const kernelClient = clients.createKernelAccountClient({
        account,
        bundlerTransport: viem.http(resolvedBundlerRpc),
        chain,
        entryPoint: entryPointAddress,
        middleware: paymaster !== 'NONE'
            ? {
                sponsorUserOperation: (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ userOperation }) {
                    const _userOperation = userOperation;
                    if (isERC20(paymaster)) {
                        return zerodevPaymaster.sponsorUserOperation({
                            entryPoint: entryPointAddress,
                            gasToken: paymaster,
                            userOperation: _userOperation,
                        });
                    }
                    return zerodevPaymaster.sponsorUserOperation({
                        entryPoint: entryPointAddress,
                        userOperation: _userOperation,
                    });
                }),
            }
            : undefined,
    });
    return kernelClient;
});

exports.createEcdsaKernelAccountClient = createEcdsaKernelAccountClient;
exports.getZeroDevBundlerRPC = getZeroDevBundlerRPC;
exports.getZeroDevPaymasterRPC = getZeroDevPaymasterRPC;
