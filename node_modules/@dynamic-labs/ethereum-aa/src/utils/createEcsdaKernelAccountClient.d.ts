import { KernelSmartAccount } from '@zerodev/sdk/accounts';
import { KernelAccountClient } from '@zerodev/sdk/clients';
import { SmartAccountSigner } from 'permissionless/accounts';
import { EntryPoint } from 'permissionless/types';
import { Address, Transport, Chain } from 'viem';
import { GetKernelVersion } from '@zerodev/sdk/types';
export type BundlerProvider = 'STACKUP' | 'PIMLICO' | 'ALCHEMY' | 'GELATO';
export type ERC20Paymaster = Address;
export type PaymasterType = 'NONE' | 'SPONSOR' | ERC20Paymaster;
export declare const getZeroDevBundlerRPC: (projectId: string, provider?: BundlerProvider) => string;
export declare const getZeroDevPaymasterRPC: (projectId: string, provider?: BundlerProvider) => string;
export declare const createEcdsaKernelAccountClient: <entryPoint extends EntryPoint, TChain extends Chain | undefined = Chain | undefined, TSource extends string = "custom", TAddress extends `0x${string}` = `0x${string}`>({ bundlerRpc, chain, paymasterRpc, projectId, signer, provider, index, paymaster, entryPointAddress, kernelVersion, ecdsaValidator, }: {
    bundlerRpc?: string;
    chain: TChain;
    projectId: string;
    signer: SmartAccountSigner<TSource, TAddress>;
    paymaster: PaymasterType;
    paymasterRpc?: string;
    entryPointAddress: entryPoint;
    provider?: BundlerProvider;
    index?: bigint;
    kernelVersion: GetKernelVersion<entryPoint>;
    ecdsaValidator: any;
}) => Promise<KernelAccountClient<entryPoint, Transport, TChain, KernelSmartAccount<entryPoint, Transport, TChain>>>;
