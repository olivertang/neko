'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var permissionless = require('permissionless');
var client = require('@dynamic-labs/client');
var ethereumAa = require('@dynamic-labs/ethereum-aa');
var messageTransport = require('@dynamic-labs/message-transport');
var viemExtension = require('@dynamic-labs/viem-extension');
var getChainById = require('../utils/getChainById/getChainById.cjs');
var logger = require('../utils/logger.cjs');

// Add JSDoc
const ZeroDevExtension = () => (client$1, core) => {
    if (!client.hasExtension(client$1, core, client.baseClientExtensionName)) {
        throw new Error('BaseClient is required to use ZeroDevExtension');
    }
    if (!client.hasExtension(client$1, core, viemExtension.viemExtensionName)) {
        throw new Error('ViemExtension is required to use ZeroDevExtension');
    }
    const zeroDevRequestChannel = messageTransport.createRequestChannel(core.messageTransport);
    return {
        zeroDev: {
            createKernelClient: (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ wallet, bundlerProvider, bundlerRpc, paymasterRpc, paymaster, }) {
                try {
                    const eoaWallet = yield client$1.wallets.accountAbstraction.getEOAWallet({ wallet });
                    if (!eoaWallet) {
                        throw new Error('EOA wallet not found');
                    }
                    const walletClient = yield client$1.viem.createWalletClient({
                        wallet: eoaWallet,
                    });
                    const { entryPointAddress, chainId, ecdsaProviderType, kernelVersion, projectId, } = yield zeroDevRequestChannel.request('getKernelAccountSettings');
                    const kernelClient = yield ethereumAa.createEcdsaKernelAccountClient({
                        bundlerRpc,
                        chain: getChainById.getChainById(chainId),
                        ecdsaValidator: ethereumAa.getEcdsaValidator(ecdsaProviderType !== null && ecdsaProviderType !== void 0 ? ecdsaProviderType : undefined),
                        entryPointAddress: entryPointAddress,
                        kernelVersion: kernelVersion,
                        paymaster: paymaster !== null && paymaster !== void 0 ? paymaster : 'NONE',
                        paymasterRpc,
                        projectId,
                        provider: bundlerProvider,
                        signer: permissionless.walletClientToSmartAccountSigner(walletClient),
                    });
                    return kernelClient;
                }
                catch (error) {
                    logger.logger.error(error);
                    throw error;
                }
            }),
        },
    };
};

exports.ZeroDevExtension = ZeroDevExtension;
