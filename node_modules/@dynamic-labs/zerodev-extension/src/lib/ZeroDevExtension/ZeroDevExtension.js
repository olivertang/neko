'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import { walletClientToSmartAccountSigner } from 'permissionless';
import { hasExtension, baseClientExtensionName } from '@dynamic-labs/client';
import { createEcdsaKernelAccountClient, getEcdsaValidator } from '@dynamic-labs/ethereum-aa';
import { createRequestChannel } from '@dynamic-labs/message-transport';
import { viemExtensionName } from '@dynamic-labs/viem-extension';
import { getChainById } from '../utils/getChainById/getChainById.js';
import { logger } from '../utils/logger.js';

// Add JSDoc
const ZeroDevExtension = () => (client, core) => {
    if (!hasExtension(client, core, baseClientExtensionName)) {
        throw new Error('BaseClient is required to use ZeroDevExtension');
    }
    if (!hasExtension(client, core, viemExtensionName)) {
        throw new Error('ViemExtension is required to use ZeroDevExtension');
    }
    const zeroDevRequestChannel = createRequestChannel(core.messageTransport);
    return {
        zeroDev: {
            createKernelClient: (_a) => __awaiter(void 0, [_a], void 0, function* ({ wallet, bundlerProvider, bundlerRpc, paymasterRpc, paymaster, }) {
                try {
                    const eoaWallet = yield client.wallets.accountAbstraction.getEOAWallet({ wallet });
                    if (!eoaWallet) {
                        throw new Error('EOA wallet not found');
                    }
                    const walletClient = yield client.viem.createWalletClient({
                        wallet: eoaWallet,
                    });
                    const { entryPointAddress, chainId, ecdsaProviderType, kernelVersion, projectId, } = yield zeroDevRequestChannel.request('getKernelAccountSettings');
                    const kernelClient = yield createEcdsaKernelAccountClient({
                        bundlerRpc,
                        chain: getChainById(chainId),
                        ecdsaValidator: getEcdsaValidator(ecdsaProviderType !== null && ecdsaProviderType !== void 0 ? ecdsaProviderType : undefined),
                        entryPointAddress: entryPointAddress,
                        kernelVersion: kernelVersion,
                        paymaster: paymaster !== null && paymaster !== void 0 ? paymaster : 'NONE',
                        paymasterRpc,
                        projectId,
                        provider: bundlerProvider,
                        signer: walletClientToSmartAccountSigner(walletClient),
                    });
                    return kernelClient;
                }
                catch (error) {
                    logger.error(error);
                    throw error;
                }
            }),
        },
    };
};

export { ZeroDevExtension };
