'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var viem = require('viem');
var messageTransport = require('@dynamic-labs/message-transport');

// If we use an arrow function here, typescript complains about non portable type inference
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
function createPublicClientForDynamic(messageTransport$1, params) {
    const requestChannel = messageTransport.createRequestChannel(messageTransport$1);
    const providerProxy = {
        request: (requestArguments) => {
            var _a;
            return requestChannel.request('ethRequest', {
                chainId: params.chain.id,
                method: requestArguments.method,
                params: (_a = requestArguments.params) !== null && _a !== void 0 ? _a : requestArguments.args,
            });
        },
    };
    return viem.createPublicClient(Object.assign(Object.assign({}, params), { transport: viem.custom(providerProxy, {
            key: 'dynamic-client-transport',
            name: 'Dynamic Client Transport',
            retryCount: 3,
            retryDelay: 200,
        }) }));
}

exports.createPublicClientForDynamic = createPublicClientForDynamic;
