'use client'
import { __awaiter, __rest } from '../../../_virtual/_tslib.js';
import { createWalletClient, custom } from 'viem';
import * as chains from 'viem/chains';
import { createRequestChannel } from '@dynamic-labs/message-transport';

const getChainFromId = (chainId) => {
    const idNumber = typeof chainId === 'string' ? parseInt(chainId) : chainId;
    return Object.values(chains).find((chain) => chain.id === idNumber);
};
const createWalletClientForDynamic = (messageTransport, _a) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    var { wallet } = _a, params = __rest(_a, ["wallet"]);
    const ethRequestChannel = createRequestChannel(messageTransport);
    const walletRequestChannel = createRequestChannel(messageTransport);
    const providerProxy = {
        request: (requestArguments) => ethRequestChannel.request('ethRequest', {
            address: wallet.address,
            method: requestArguments.method,
            params: requestArguments.params,
        }),
    };
    const { network } = yield walletRequestChannel.request('getNetwork', {
        wallet,
    });
    return createWalletClient(Object.assign(Object.assign({}, params), { account: wallet.address, chain: (_b = params.chain) !== null && _b !== void 0 ? _b : getChainFromId(network), transport: custom(providerProxy, {
            key: 'dynamic-client-transport',
            name: 'Dynamic Client Transport',
            retryCount: 3,
            retryDelay: 200,
        }) }));
});

export { createWalletClientForDynamic };
