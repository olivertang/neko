import { Connection, ConnectionConfig } from '@solana/web3.js';
import { Chain, IHardwareWalletConnector, WalletConnectorBase, WalletMetadata } from '@dynamic-labs/wallet-connector-core';
import { GenericNetwork } from '@dynamic-labs/types';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { JwtVerifiedCredential } from '@dynamic-labs/sdk-api-core';
import { IChainRpcProviders } from '../rpc';
import { SolanaWallet } from '../wallet';
import { ISolana } from '../types';
export type SolanaWalletConnectorOpts = {
    chainRpcProviders: IChainRpcProviders;
    solNetworks: GenericNetwork[];
    walletBook: WalletBookSchema;
    metadata?: WalletMetadata;
    connectionConfig?: ConnectionConfig;
};
export declare abstract class SolanaWalletConnector extends WalletConnectorBase<typeof SolanaWallet> implements IHardwareWalletConnector {
    isHardwareWalletEnabled: boolean;
    verifiedCredentials: JwtVerifiedCredential[];
    solNetworks: GenericNetwork[];
    ChainWallet: typeof SolanaWallet;
    supportedChains: Chain[];
    connectedChain: Chain;
    protected connectionConfig: ConnectionConfig | undefined;
    constructor(opts: SolanaWalletConnectorOpts);
    getNetwork(): Promise<string>;
    endSession(): Promise<void>;
    getWalletClient(): Connection;
    getPublicClient(): Promise<Connection | undefined>;
    abstract getSigner(): Promise<ISolana | undefined>;
    abstract connect(): Promise<void>;
    getBalance(address: string): Promise<string | undefined>;
    lamportsToSol(lamports: number): number;
    canConnectWithHardwareWallet(): boolean;
    signMessage(messageToSign: string): Promise<string | undefined>;
    proveOwnership(address: string, messageToSign: string): Promise<string | undefined>;
    signMessageViaTransaction(messageToSign: string): Promise<string>;
    private buildAuthTx;
    setVerifiedCredentials(verifiedCredentials: JwtVerifiedCredential[]): void;
    isLedgerAddress(address: string): boolean;
}
