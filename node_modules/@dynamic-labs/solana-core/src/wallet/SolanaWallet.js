'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { TransactionMessage, SystemProgram, PublicKey, VersionedTransaction } from '@solana/web3.js';
import { Wallet, logger } from '@dynamic-labs/wallet-connector-core';
import { solToLamports, cloneObjectWithOverrides } from '@dynamic-labs/utils';

class SolanaWallet extends Wallet {
    /**
     * Sends the native balance of the wallet to the given address.
     * @param amount - The amount of balance to send (in SOL).
     * @param toAddress - The address to send the balance to.
     * @returns The signature of the sent transaction.
     */
    sendBalance(_a) {
        return __awaiter(this, arguments, void 0, function* ({ amount, toAddress, }) {
            const connection = yield this.getConnection();
            const signer = yield this.getSigner();
            const { blockhash } = yield connection.getLatestBlockhash('finalized');
            const message = new TransactionMessage({
                instructions: [
                    SystemProgram.transfer({
                        fromPubkey: new PublicKey(this.address),
                        lamports: solToLamports(Number(amount)),
                        toPubkey: new PublicKey(toAddress),
                    }),
                ],
                payerKey: new PublicKey(this.address),
                recentBlockhash: blockhash,
            }).compileToV0Message();
            const transaction = new VersionedTransaction(message);
            const { signature } = yield signer.signAndSendTransaction(transaction);
            return signature;
        });
    }
    /**
     * Retrieves the RPC connection
     * @returns A promise that resolves to the RPC connection
     */
    getConnection() {
        return __awaiter(this, void 0, void 0, function* () {
            return this._connector.getWalletClient();
        });
    }
    /**
     * Retrieves the solana signer for the wallet.
     * @returns A promise that resolves to the signer,
     * or throws an error if the signer cannot be retrieved.
     */
    getSigner() {
        return __awaiter(this, void 0, void 0, function* () {
            const signer = yield this._connector.getSigner();
            if (!signer) {
                throw new Error('unable to retrieve Solana signer');
            }
            try {
                return cloneObjectWithOverrides(signer, {
                    signAllTransactions: (transactions) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return signer.signAllTransactions(transactions);
                    }),
                    signAndSendTransaction: (transaction, ...args) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return signer.signAndSendTransaction(transaction, ...args);
                    }),
                    signMessage: (message, ...args) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return signer.signMessage(message, ...args);
                    }),
                    signTransaction: (transaction) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return signer.signTransaction(transaction);
                    }),
                });
            }
            catch (error) {
                logger.warn(`Failed to add logic to auto-sync the wallet. Signer might be out of sync for wallet: ${this._connector.name} (${this.address})`, error);
                return signer;
            }
        });
    }
}

export { SolanaWallet };
