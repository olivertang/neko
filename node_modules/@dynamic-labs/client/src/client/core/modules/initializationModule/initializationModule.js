'use client'
import { reactive } from '@vue/reactivity';
import { createRequestChannel, parseErrorFromTransport } from '@dynamic-labs/message-transport';
import { logger } from '../../../../utils/logger/logger.js';

const createInitializationModule = (messageTransport) => {
    const consoleRequestChannel = createRequestChannel(messageTransport);
    const state = reactive({
        error: null,
    });
    /**
     * Uses regular console.error to log the errors
     * so we dont send the error to the backend twice
     */
    consoleRequestChannel.handle('error', (serializedError, { severity }) => {
        const error = parseErrorFromTransport(serializedError);
        if (Array.isArray(error)) {
            // Log each item individually because the expo console fails to log complex objects
            // So this way if one item is complex, it doesn't hide the others
            // eslint-disable-next-line no-console
            for (const item of error)
                console.error(item);
            if (severity === 'fatal') {
                state.error = new Error('Unknown error occurred, check your console for more details');
            }
            return;
        }
        if (severity === 'fatal') {
            state.error = error;
        }
        // We also log the message individually in case the error object fails to be logged by the expo console
        // eslint-disable-next-line no-console
        if (error.message)
            console.error(error.message);
        // eslint-disable-next-line no-console
        console.error(error);
    });
    return {
        get error() {
            return state.error;
        },
        set error(error) {
            state.error = error;
            /**
             * Uses the logger so the error is sent to the backend
             */
            logger.error(state.error);
        },
    };
};

export { createInitializationModule };
