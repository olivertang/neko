import { ClientProps } from '../client';
/**
 * Holds properties and methods used by client extensions, but that we don't
 * want users to have access to.
 */
export type Core = ReturnType<typeof createCore>;
export declare const createCore: (props: ClientProps) => {
    /**
     * Allows an extension to add its name to the list, such that
     * other extensions are able to detect if it is present.
     *
     * Ex: ViemExtension adds "viem" to the list, and WagmiExtension later
     * checks this list and throws an error if it doesn't find "viem" there.
     */
    declaredExtensionNames: string[];
    /**
     * SDK initialization module handles the initialization error
     */
    initialization: import("./modules/initializationModule/initializationModule").InitializationModule;
    /**
     * Manages the manifest of the host
     */
    manifest: {
        setAppOrigin: (appOrigin: string) => string;
        setPlatform: (platform: "browser" | "react-native" | "flutter") => void;
        setRedirectUrl: (redirectUrl: string) => string;
    };
    /**
     * Message transport that will be used to send and receive messages to the webview.
     * Should preferably be used with createRequestChannel, rather than used directly.
     *
     * Note: Doesn't implement forwarding messages to/from webview yet.
     * The user is expected to extend the client with an Extension that implements that.
     */
    messageTransport: import("@dynamic-labs/message-transport").MessageTransport & {
        emit: (message: import("@dynamic-labs/message-transport").MessageTransportData, options?: {
            onEmit?: VoidFunction | undefined;
        } | undefined) => void;
        unblock: () => void;
        isBlocked: () => boolean;
    } & {
        defaultOrigin: "webview" | "host";
        emit: (message: import("@dynamic-labs/message-transport").MessageTransportDataOptionalOrigin) => void;
    };
};
