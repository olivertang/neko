'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var messageTransport = require('@dynamic-labs/message-transport');
var initializationModule = require('./modules/initializationModule/initializationModule.cjs');
var manifestModule = require('./modules/manifestModule/manifestModule.cjs');

const createCore = (props) => {
    const messageTransport$1 = messageTransport.applyDefaultMessageOrigin({
        defaultOrigin: 'host',
        messageTransport: messageTransport.makeWaitForInitEvent({
            bypassBlockIf: (message) => message.origin === 'webview',
            initializeMessageType: messageTransport.sdkHasLoadedEventName,
            messageTransport: messageTransport.createMessageTransport(),
        }),
    });
    // Uncomment this to easily debug incoming/outgoing messages to webview
    // messageTransport.on((message) =>
    //   console.log('message', JSON.stringify(message, null, 2)),
    // );
    const initialization = initializationModule.createInitializationModule(messageTransport$1);
    return {
        /**
         * Allows an extension to add its name to the list, such that
         * other extensions are able to detect if it is present.
         *
         * Ex: ViemExtension adds "viem" to the list, and WagmiExtension later
         * checks this list and throws an error if it doesn't find "viem" there.
         */
        declaredExtensionNames: [],
        /**
         * SDK initialization module handles the initialization error
         */
        initialization,
        /**
         * Manages the manifest of the host
         */
        manifest: manifestModule.createManifestModule(props, messageTransport$1, initialization),
        /**
         * Message transport that will be used to send and receive messages to the webview.
         * Should preferably be used with createRequestChannel, rather than used directly.
         *
         * Note: Doesn't implement forwarding messages to/from webview yet.
         * The user is expected to extend the client with an Extension that implements that.
         */
        messageTransport: messageTransport$1,
    };
};

exports.createCore = createCore;
