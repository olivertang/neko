'use client'
import { applyDefaultMessageOrigin, makeWaitForInitEvent, sdkHasLoadedEventName, createMessageTransport } from '@dynamic-labs/message-transport';
import { createInitializationModule } from './modules/initializationModule/initializationModule.js';
import { createManifestModule } from './modules/manifestModule/manifestModule.js';

const createCore = (props) => {
    const messageTransport = applyDefaultMessageOrigin({
        defaultOrigin: 'host',
        messageTransport: makeWaitForInitEvent({
            bypassBlockIf: (message) => message.origin === 'webview',
            initializeMessageType: sdkHasLoadedEventName,
            messageTransport: createMessageTransport(),
        }),
    });
    // Uncomment this to easily debug incoming/outgoing messages to webview
    // messageTransport.on((message) =>
    //   console.log('message', JSON.stringify(message, null, 2)),
    // );
    const initialization = createInitializationModule(messageTransport);
    return {
        /**
         * Allows an extension to add its name to the list, such that
         * other extensions are able to detect if it is present.
         *
         * Ex: ViemExtension adds "viem" to the list, and WagmiExtension later
         * checks this list and throws an error if it doesn't find "viem" there.
         */
        declaredExtensionNames: [],
        /**
         * SDK initialization module handles the initialization error
         */
        initialization,
        /**
         * Manages the manifest of the host
         */
        manifest: createManifestModule(props, messageTransport, initialization),
        /**
         * Message transport that will be used to send and receive messages to the webview.
         * Should preferably be used with createRequestChannel, rather than used directly.
         *
         * Note: Doesn't implement forwarding messages to/from webview yet.
         * The user is expected to extend the client with an Extension that implements that.
         */
        messageTransport,
    };
};

export { createCore };
