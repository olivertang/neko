'use client'
import { createStore, createEventEmitterForMessages, authEventNames, createRequestChannel } from '@dynamic-labs/message-transport';
import { pickListenerActions } from '../../utils/pickListenerActions/pickListenerActions.js';
import { createEmailAuthModule } from './emailAuthModule/emailAuthModule.js';
import { createExternalAuthModule } from './externalAuthModule/externalAuthModule.js';
import { createSmsAuthModule } from './smsAuthModule/smsAuthModule.js';
import { createSocialAuthModule } from './socialAuthModule/socialAuthModule.js';

const defaultAuthenticatedUserHandler = () => Promise.resolve();
const createAuthModule = (core) => {
    const store = createStore({
        initialState: {
            authenticatedUser: null,
            token: null,
        },
        key: 'auth',
        messageTransport: core.messageTransport,
    });
    const messageEvents = createEventEmitterForMessages({
        eventNames: authEventNames,
        initialEventEmitter: store.eventEmitter,
        messageTransport: core.messageTransport,
    });
    const requestChannel = createRequestChannel(core.messageTransport);
    const handlers = {
        userAuthenticated: defaultAuthenticatedUserHandler,
    };
    requestChannel.handle('handleAuthenticatedUser', ({ user }) => handlers.userAuthenticated(user));
    return Object.assign(store.getters, pickListenerActions(messageEvents), {
        clearHandler: () => (handlers.userAuthenticated = defaultAuthenticatedUserHandler),
        email: createEmailAuthModule(core),
        external: createExternalAuthModule(core),
        logout: () => requestChannel.request('logout'),
        setHandler: (_, handler) => (handlers.userAuthenticated = handler),
        sms: createSmsAuthModule(core),
        social: createSocialAuthModule(core),
    });
};

export { createAuthModule };
