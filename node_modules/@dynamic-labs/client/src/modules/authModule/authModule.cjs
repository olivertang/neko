'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var messageTransport = require('@dynamic-labs/message-transport');
var pickListenerActions = require('../../utils/pickListenerActions/pickListenerActions.cjs');
var emailAuthModule = require('./emailAuthModule/emailAuthModule.cjs');
var externalAuthModule = require('./externalAuthModule/externalAuthModule.cjs');
var smsAuthModule = require('./smsAuthModule/smsAuthModule.cjs');
var socialAuthModule = require('./socialAuthModule/socialAuthModule.cjs');

const defaultAuthenticatedUserHandler = () => Promise.resolve();
const createAuthModule = (core) => {
    const store = messageTransport.createStore({
        initialState: {
            authenticatedUser: null,
            token: null,
        },
        key: 'auth',
        messageTransport: core.messageTransport,
    });
    const messageEvents = messageTransport.createEventEmitterForMessages({
        eventNames: messageTransport.authEventNames,
        initialEventEmitter: store.eventEmitter,
        messageTransport: core.messageTransport,
    });
    const requestChannel = messageTransport.createRequestChannel(core.messageTransport);
    const handlers = {
        userAuthenticated: defaultAuthenticatedUserHandler,
    };
    requestChannel.handle('handleAuthenticatedUser', ({ user }) => handlers.userAuthenticated(user));
    return Object.assign(store.getters, pickListenerActions.pickListenerActions(messageEvents), {
        clearHandler: () => (handlers.userAuthenticated = defaultAuthenticatedUserHandler),
        email: emailAuthModule.createEmailAuthModule(core),
        external: externalAuthModule.createExternalAuthModule(core),
        logout: () => requestChannel.request('logout'),
        setHandler: (_, handler) => (handlers.userAuthenticated = handler),
        sms: smsAuthModule.createSmsAuthModule(core),
        social: socialAuthModule.createSocialAuthModule(core),
    });
};

exports.createAuthModule = createAuthModule;
