'use client'
import { createRequestChannel, createStore, createEventEmitterForMessages, userWalletsEventNames } from '@dynamic-labs/message-transport';
import { pickListenerActions } from '../../utils/pickListenerActions/pickListenerActions.js';
import { createAccountAbstractionModule } from './accountAbstractionModule/accountAbstractionModule.js';
import { createWalletListenerMethods } from './createWalletListenerMethods/createWalletListenerMethods.js';
import { createEmbeddedWalletsModule } from './embeddedWalletsModule/embeddedWalletsModule.js';

const defaultConnectedWalletHandler = () => Promise.resolve(true);
const createWalletsModule = (core) => {
    const requestChannel = createRequestChannel(core.messageTransport);
    const store = createStore({
        initialState: { primary: null, userWallets: [] },
        key: 'wallets',
        messageTransport: core.messageTransport,
    });
    const messageEvents = createEventEmitterForMessages({
        eventNames: userWalletsEventNames,
        initialEventEmitter: store.eventEmitter,
        messageTransport: core.messageTransport,
    });
    const signMessage = (params) => requestChannel.request('signMessage', params);
    const getBalance = (params) => requestChannel.request('getBalance', params);
    const switchNetwork = (params) => requestChannel.request('switchNetwork', params);
    const getNetwork = (params) => requestChannel.request('getNetwork', params);
    const setPrimary = (params) => requestChannel.request('setPrimary', params);
    const { offWalletEvent, onWalletEvent } = createWalletListenerMethods(requestChannel);
    const handlers = {
        walletConnected: defaultConnectedWalletHandler,
    };
    requestChannel.handle('handleConnectedWallet', (wallet) => handlers.walletConnected(wallet));
    return Object.assign(store.getters, pickListenerActions(messageEvents), {
        accountAbstraction: createAccountAbstractionModule(core),
        clearHandler: () => (handlers.walletConnected = defaultConnectedWalletHandler),
        embedded: createEmbeddedWalletsModule(core),
        getBalance,
        getNetwork,
        offWalletEvent,
        onWalletEvent,
        setHandler: (_, handler) => (handlers.walletConnected = handler),
        setPrimary,
        signMessage,
        switchNetwork,
    });
};

export { createWalletsModule };
