'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var messageTransport = require('@dynamic-labs/message-transport');
var pickListenerActions = require('../../utils/pickListenerActions/pickListenerActions.cjs');
var accountAbstractionModule = require('./accountAbstractionModule/accountAbstractionModule.cjs');
var createWalletListenerMethods = require('./createWalletListenerMethods/createWalletListenerMethods.cjs');
var embeddedWalletsModule = require('./embeddedWalletsModule/embeddedWalletsModule.cjs');

const defaultConnectedWalletHandler = () => Promise.resolve(true);
const createWalletsModule = (core) => {
    const requestChannel = messageTransport.createRequestChannel(core.messageTransport);
    const store = messageTransport.createStore({
        initialState: { primary: null, userWallets: [] },
        key: 'wallets',
        messageTransport: core.messageTransport,
    });
    const messageEvents = messageTransport.createEventEmitterForMessages({
        eventNames: messageTransport.userWalletsEventNames,
        initialEventEmitter: store.eventEmitter,
        messageTransport: core.messageTransport,
    });
    const signMessage = (params) => requestChannel.request('signMessage', params);
    const getBalance = (params) => requestChannel.request('getBalance', params);
    const switchNetwork = (params) => requestChannel.request('switchNetwork', params);
    const getNetwork = (params) => requestChannel.request('getNetwork', params);
    const setPrimary = (params) => requestChannel.request('setPrimary', params);
    const { offWalletEvent, onWalletEvent } = createWalletListenerMethods.createWalletListenerMethods(requestChannel);
    const handlers = {
        walletConnected: defaultConnectedWalletHandler,
    };
    requestChannel.handle('handleConnectedWallet', (wallet) => handlers.walletConnected(wallet));
    return Object.assign(store.getters, pickListenerActions.pickListenerActions(messageEvents), {
        accountAbstraction: accountAbstractionModule.createAccountAbstractionModule(core),
        clearHandler: () => (handlers.walletConnected = defaultConnectedWalletHandler),
        embedded: embeddedWalletsModule.createEmbeddedWalletsModule(core),
        getBalance,
        getNetwork,
        offWalletEvent,
        onWalletEvent,
        setHandler: (_, handler) => (handlers.walletConnected = handler),
        setPrimary,
        signMessage,
        switchNetwork,
    });
};

exports.createWalletsModule = createWalletsModule;
