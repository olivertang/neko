'use client'
const createWalletListenerMethods = (requestChannel) => {
    const getWalletListenerKey = (walletId, event) => `${walletId}__${event}`;
    const walletListeners = {};
    const onWalletEvent = (wallet, event, callback) => {
        const listenerKey = getWalletListenerKey(wallet.id, event);
        if (!walletListeners[listenerKey])
            walletListeners[listenerKey] = new Set();
        walletListeners[listenerKey].add(callback);
    };
    const offWalletEvent = (wallet, event, callback) => {
        const listenerKey = getWalletListenerKey(wallet.id, event);
        if (!walletListeners[listenerKey])
            return;
        walletListeners[listenerKey].delete(callback);
        if (walletListeners[listenerKey].size === 0)
            delete walletListeners[listenerKey];
    };
    requestChannel.handle('onWalletEvent', ({ event, eventParams, walletId }) => {
        var _a;
        const listenerKey = getWalletListenerKey(walletId, event);
        (_a = walletListeners[listenerKey]) === null || _a === void 0 ? void 0 : _a.forEach((callback) => callback(...eventParams));
    });
    return { offWalletEvent, onWalletEvent };
};

export { createWalletListenerMethods };
