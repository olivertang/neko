import { PickedEventListeners, StoreEventListeners, WalletsModuleMessages, WalletsModuleState, userWalletsEventNames } from '@dynamic-labs/message-transport';
import { BaseWallet } from '@dynamic-labs/types';
import { Core } from '../../client/core';
import { type AccountAbstractionModule } from './accountAbstractionModule';
import { WalletEventListener } from './createWalletListenerMethods';
import { EmbeddedWalletsModule } from './embeddedWalletsModule';
export type PublicWalletModuleMessages = Pick<WalletsModuleMessages, typeof userWalletsEventNames[number]>;
export type WalletsModule = WalletsModuleState & PickedEventListeners<PublicWalletModuleMessages> & StoreEventListeners<WalletsModuleState> & {
    embedded: EmbeddedWalletsModule;
    accountAbstraction: AccountAbstractionModule;
    signMessage: WalletsModuleMessages['signMessage'];
    switchNetwork: WalletsModuleMessages['switchNetwork'];
    getBalance: WalletsModuleMessages['getBalance'];
    getNetwork: WalletsModuleMessages['getNetwork'];
    setPrimary: WalletsModuleMessages['setPrimary'];
    onWalletEvent: WalletEventListener;
    offWalletEvent: WalletEventListener;
    setHandler: (name: 'walletConnected', handler: ConnectedWalletsHandler) => void;
    clearHandler: (name: 'walletConnected') => void;
};
type ConnectedWalletsHandler = (wallet: Partial<BaseWallet>) => Promise<boolean>;
export declare const createWalletsModule: (core: Core) => WalletsModule;
export {};
