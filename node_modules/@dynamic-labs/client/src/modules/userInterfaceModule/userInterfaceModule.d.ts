import { PickedEventListeners, UserInterfaceModuleMessages, userInterfaceEventNames } from '@dynamic-labs/message-transport';
import { Core } from '../../client/core';
type UserInterfaceModuleMethods = {
    auth: {
        /**
         * Opens the auth flow UI.
         *
         * Resolves when our SDK receives the request.
         * Rejects if the request is not received.
         */
        show: () => Promise<void>;
        /**
         * Closes the auth flow UI.
         *
         * Resolves when our SDK receives the request.
         * Rejects if the request is not received.
         */
        hide: () => Promise<void>;
    };
    userProfile: {
        /**
         * Opens the user profile UI.
         *
         * Resolves when our SDK receives the request.
         * Rejects if the request is not received.
         */
        show: () => Promise<void>;
        /**
         * Closes the user profile UI.
         *
         * Resolves when our SDK receives the request.
         * Rejects if the request is not received.
         */
        hide: () => Promise<void>;
    };
    wallets: {
        revealEmbeddedWalletKey: UserInterfaceModuleMessages['revealEmbeddedWalletKey'];
    };
};
type PublicUserInterfaceModuleMessages = Pick<UserInterfaceModuleMessages, typeof userInterfaceEventNames[number]>;
export type UserInterfaceModule = PickedEventListeners<PublicUserInterfaceModuleMessages> & UserInterfaceModuleMethods;
export declare const createUserInterfaceModule: (core: Core) => UserInterfaceModule;
export {};
