import { MerkleTree } from "merkletreejs";
import { getUserOperationHash } from "permissionless";
import { concatHex, encodeAbiParameters, hashMessage, keccak256 } from "viem";
export async function webauthnSignUserOps({ account, multiUserOps, entryPoint: entryPointAddress }) {
    const userOpHashes = multiUserOps.map((multiUserOp, _index) => {
        return getUserOperationHash({
            userOperation: {
                ...multiUserOp.userOperation,
                signature: "0x"
            },
            entryPoint: entryPointAddress,
            chainId: multiUserOp.chainId
        });
    });
    const merkleTree = new MerkleTree(userOpHashes, keccak256, {
        sortPairs: true
    });
    const merkleRoot = merkleTree.getHexRoot();
    const toEthSignedMessageHash = hashMessage({ raw: merkleRoot });
    const passkeySig = await account.kernelPluginManager.signMessage({
        message: {
            raw: toEthSignedMessageHash
        }
    });
    const merkleProofs = userOpHashes.map((hash) => {
        return merkleTree.getHexProof(hash);
    });
    const multiChainSigs = multiUserOps.map((_, index) => {
        const merkleProof = merkleProofs[index];
        const encodedMerkleProof = encodeAbiParameters([{ name: "merkleData", type: "bytes32[]" }], [merkleProof]);
        const merkleData = concatHex([merkleRoot, encodedMerkleProof]);
        return encodeAbiParameters([
            {
                name: "merkleData",
                type: "bytes"
            },
            {
                name: "signature",
                type: "bytes"
            }
        ], [merkleData, passkeySig]);
    });
    const signedMultiUserOps = multiUserOps.map((multiUserOp, index) => {
        return {
            ...multiUserOp.userOperation,
            signature: multiChainSigs[index]
        };
    });
    return signedMultiUserOps;
}
//# sourceMappingURL=webauthnSignUserOps.js.map