import type { GetKernelVersion, KernelValidator } from "@zerodev/sdk/types";
import type { WebAuthnKey } from "@zerodev/webauthn-key";
import type { EntryPoint } from "permissionless/types";
import { type Address, type Chain, type Client, type Transport } from "viem";
export declare function toMultiChainWebAuthnValidator<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined>(client: Client<TTransport, TChain, undefined>, { webAuthnKey, entryPoint: entryPointAddress, kernelVersion, rpId, validatorAddress }: {
    webAuthnKey: WebAuthnKey;
    entryPoint: entryPoint;
    kernelVersion: GetKernelVersion<entryPoint>;
    rpId?: string;
    validatorAddress?: Address;
}): Promise<KernelValidator<entryPoint, "MultiChainWebAuthnValidator"> & {
    getSerializedData: () => string;
}>;
export declare function deserializeMultiChainWebAuthnValidator<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined>(client: Client<TTransport, TChain, undefined>, { serializedData, entryPoint: entryPointAddress, kernelVersion }: {
    serializedData: string;
    entryPoint: entryPoint;
    kernelVersion: GetKernelVersion<entryPoint>;
}): Promise<KernelValidator<entryPoint, "MultiChainWebAuthnValidator"> & {
    getSerializedData: () => string;
}>;
//# sourceMappingURL=toMultiChainWebAuthnValidator.d.ts.map