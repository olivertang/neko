import { type KernelAccountClient, type KernelSmartAccount, type SmartAccountClientConfig } from "@zerodev/sdk";
import type { SmartAccount } from "permissionless/accounts";
import type { Middleware, PrepareUserOperationRequestReturnType } from "permissionless/actions/smartAccount";
import type { EntryPoint, Prettify } from "permissionless/types";
import type { StateOverrides } from "permissionless/types/bundler";
import { type Chain, type Client, type Transport } from "viem";
import { type ValidatorType, prepareMultiUserOpRequest } from "./actions/index.js";
export type KernelAccountMultiChainClientActions<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends SmartAccount<entryPoint, string, TTransport, TChain> | undefined = SmartAccount<entryPoint, string, TTransport, TChain> | undefined> = {
    prepareMultiUserOpRequest: <TTransport extends Transport>(args: Prettify<Parameters<typeof prepareMultiUserOpRequest<entryPoint, TTransport, TChain, TSmartAccount>>[1]>, validatorType: ValidatorType, numOfUserOps: number, stateOverrides?: StateOverrides) => Promise<Prettify<PrepareUserOperationRequestReturnType<entryPoint>>>;
};
export declare function kernelAccountMultiChainClientActions<entryPoint extends EntryPoint>({ middleware }: Middleware<entryPoint>): <TTransport extends Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends SmartAccount<entryPoint, string, TTransport, TChain> | undefined = SmartAccount<entryPoint, string, TTransport, TChain> | undefined>(client: Client<TTransport, TChain, TSmartAccount>) => KernelAccountMultiChainClientActions<entryPoint, TTransport, TChain, TSmartAccount>;
export type KernelMultiChainClient<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends KernelSmartAccount<entryPoint, TTransport, TChain> | undefined = KernelSmartAccount<entryPoint, TTransport, TChain> | undefined> = KernelAccountClient<entryPoint, TTransport, TChain, TSmartAccount> & {
    prepareMultiUserOpRequest: (args: Prettify<Parameters<typeof prepareMultiUserOpRequest<entryPoint, TTransport, TChain, TSmartAccount>>[1]>, validatorType: ValidatorType, numOfUserOps: number, stateOverrides?: StateOverrides) => Promise<Prettify<PrepareUserOperationRequestReturnType<entryPoint>>>;
};
export declare const createKernelMultiChainClient: <TSmartAccount extends KernelSmartAccount<TEntryPoint, TTransport, TChain> | undefined, TTransport extends Transport = Transport, TChain extends Chain | undefined = undefined, TEntryPoint extends EntryPoint = TSmartAccount extends KernelSmartAccount<infer U extends EntryPoint> ? U : never>(parameters: {
    cacheTime?: number | undefined;
    chain?: Chain | TChain | undefined;
    key?: string | undefined;
    name?: string | undefined;
    pollingInterval?: number | undefined;
    account?: TSmartAccount | undefined;
    bundlerTransport: Transport;
    middleware?: {
        gasPrice?: (() => Promise<{
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
        }>) | undefined;
        sponsorUserOperation?: ((args: {
            userOperation: import("permissionless").UserOperation<import("permissionless/types/entrypoint.js").GetEntryPointVersion<TEntryPoint>>;
            entryPoint: TEntryPoint;
        }) => Promise<import("permissionless/actions/smartAccount").SponsorUserOperationReturnType<TEntryPoint>>) | undefined;
    } | ((args: {
        userOperation: import("permissionless").UserOperation<import("permissionless/types/entrypoint.js").GetEntryPointVersion<TEntryPoint>>;
        entryPoint: TEntryPoint;
    }) => Promise<import("permissionless").UserOperation<import("permissionless/types/entrypoint.js").GetEntryPointVersion<TEntryPoint>>>) | undefined;
    entryPoint: TEntryPoint;
}) => KernelMultiChainClient<TEntryPoint, TTransport, TChain, TSmartAccount>;
//# sourceMappingURL=multiChainClient.d.ts.map