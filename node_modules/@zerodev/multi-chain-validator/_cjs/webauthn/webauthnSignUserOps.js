"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.webauthnSignUserOps = void 0;
const merkletreejs_1 = require("merkletreejs");
const permissionless_1 = require("permissionless");
const viem_1 = require("viem");
async function webauthnSignUserOps({ account, multiUserOps, entryPoint: entryPointAddress }) {
    const userOpHashes = multiUserOps.map((multiUserOp, _index) => {
        return (0, permissionless_1.getUserOperationHash)({
            userOperation: {
                ...multiUserOp.userOperation,
                signature: "0x"
            },
            entryPoint: entryPointAddress,
            chainId: multiUserOp.chainId
        });
    });
    const merkleTree = new merkletreejs_1.MerkleTree(userOpHashes, viem_1.keccak256, {
        sortPairs: true
    });
    const merkleRoot = merkleTree.getHexRoot();
    const toEthSignedMessageHash = (0, viem_1.hashMessage)({ raw: merkleRoot });
    const passkeySig = await account.kernelPluginManager.signMessage({
        message: {
            raw: toEthSignedMessageHash
        }
    });
    const merkleProofs = userOpHashes.map((hash) => {
        return merkleTree.getHexProof(hash);
    });
    const multiChainSigs = multiUserOps.map((_, index) => {
        const merkleProof = merkleProofs[index];
        const encodedMerkleProof = (0, viem_1.encodeAbiParameters)([{ name: "merkleData", type: "bytes32[]" }], [merkleProof]);
        const merkleData = (0, viem_1.concatHex)([merkleRoot, encodedMerkleProof]);
        return (0, viem_1.encodeAbiParameters)([
            {
                name: "merkleData",
                type: "bytes"
            },
            {
                name: "signature",
                type: "bytes"
            }
        ], [merkleData, passkeySig]);
    });
    const signedMultiUserOps = multiUserOps.map((multiUserOp, index) => {
        return {
            ...multiUserOp.userOperation,
            signature: multiChainSigs[index]
        };
    });
    return signedMultiUserOps;
}
exports.webauthnSignUserOps = webauthnSignUserOps;
//# sourceMappingURL=webauthnSignUserOps.js.map