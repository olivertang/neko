"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uninstallPlugin = void 0;
const smartAccount_1 = require("permissionless/actions/smartAccount");
const utils_1 = require("permissionless/utils");
const utils_2 = require("viem/utils");
const KernelAccountAbi_js_1 = require("../../accounts/kernel/abi/kernel_v_3_0_0/KernelAccountAbi.js");
const constants_js_1 = require("../../constants.js");
async function uninstallPlugin(client, args) {
    const { account: account_ = client.account, middleware, plugin, hook } = args;
    if (!account_)
        throw new utils_1.AccountOrClientNotFoundError();
    const account = (0, utils_1.parseAccount)(account_);
    let validatorId;
    if ([constants_js_1.VALIDATOR_TYPE.PERMISSION, constants_js_1.VALIDATOR_TYPE.SECONDARY].includes(constants_js_1.VALIDATOR_TYPE[plugin.validatorType])) {
        validatorId = (0, utils_2.concatHex)([
            constants_js_1.VALIDATOR_TYPE[plugin.validatorType],
            (0, utils_2.pad)(plugin.getIdentifier(), {
                size: 20,
                dir: "right"
            })
        ]);
    }
    else {
        throw new Error(`Cannot uninstall ${plugin.validatorType} plugin`);
    }
    const validatorData = await plugin.getEnableData(account.address);
    const hookData = (await hook?.getEnableData(account.address)) ?? "0x";
    return await (0, utils_2.getAction)(client, (smartAccount_1.sendTransactions), "sendTransactions")({
        ...args,
        transactions: [
            {
                to: account.address,
                data: (0, utils_2.encodeFunctionData)({
                    abi: KernelAccountAbi_js_1.KernelV3AccountAbi,
                    functionName: "uninstallValidation",
                    args: [validatorId, validatorData, hookData]
                }),
                value: 0n
            }
        ],
        account,
        middleware
    });
}
exports.uninstallPlugin = uninstallPlugin;
//# sourceMappingURL=uninstallPlugin.js.map