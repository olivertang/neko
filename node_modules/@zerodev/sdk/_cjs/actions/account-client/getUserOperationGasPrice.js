"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserOperationGasPrice = void 0;
const actions_1 = require("viem/actions");
const chains_1 = require("viem/chains");
const utils_js_1 = require("../../clients/utils.js");
const getUserOperationGasPrice = async (client) => {
    if (client.transport?.url &&
        ((0, utils_js_1.isProviderSet)(client.transport.url, "ALCHEMY") ||
            (0, utils_js_1.isProviderSet)(client.transport.url, "ZERODEV") ||
            (0, utils_js_1.isProviderSet)(client.transport.url, "CONDUIT"))) {
        const [fee, block] = await Promise.all([
            client.request({
                method: "rundler_maxPriorityFeePerGas",
                params: []
            }),
            (0, actions_1.getBlock)(client, { blockTag: "latest" })
        ]);
        const chainId = client.chain
            ? client.chain.id
            : await (0, actions_1.getChainId)(client);
        const baseFeeMultiplier = chainId === chains_1.arbitrum.id ? 1.05 : 1.5;
        const priorityFeeMultiplier = chainId === chains_1.arbitrum.id ? 1.0 : 1.25;
        const denominator = 100;
        const multiply = (base, multiplier) => (base * BigInt(multiplier * denominator)) / BigInt(denominator);
        const maxPriorityFeePerGas = multiply(BigInt(fee), priorityFeeMultiplier);
        const baseFeePerGas = multiply(block.baseFeePerGas, baseFeeMultiplier);
        const maxFeePerGas = baseFeePerGas + maxPriorityFeePerGas;
        return { maxFeePerGas, maxPriorityFeePerGas };
    }
    const gasPrice = await client.request({
        method: "zd_getUserOperationGasPrice",
        params: []
    });
    return {
        maxFeePerGas: BigInt(gasPrice.standard.maxFeePerGas),
        maxPriorityFeePerGas: BigInt(gasPrice.standard.maxPriorityFeePerGas)
    };
};
exports.getUserOperationGasPrice = getUserOperationGasPrice;
//# sourceMappingURL=getUserOperationGasPrice.js.map