import { ENTRYPOINT_ADDRESS_V06 } from "permissionless";
import { paymasterActionsEip7677 } from "permissionless/experimental";
/**
 * Returns paymasterAndData & updated gas parameters required to sponsor a userOperation.
 */
export const sponsorUserOperationEip7677 = async (client, args, bundlerClient, stateOverrides) => {
    const { entryPoint: entryPointAddress, userOperation } = args;
    const chain = client.chain;
    const paymasterClient = client.extend(paymasterActionsEip7677(entryPointAddress));
    const stubData = await paymasterClient.getPaymasterStubData({
        userOperation: userOperation,
        chain
    });
    const stubUserOperation = {
        ...userOperation,
        ...stubData
    };
    const gas = (await bundlerClient.estimateUserOperationGas({
        userOperation: stubUserOperation
    }, stateOverrides));
    const userOperationWithGas = {
        ...stubUserOperation,
        callGasLimit: gas.callGasLimit,
        verificationGasLimit: gas.verificationGasLimit,
        preVerificationGas: gas.preVerificationGas
    };
    const paymasterData = await paymasterClient.getPaymasterData({
        userOperation: userOperationWithGas,
        chain
    });
    if (entryPointAddress === ENTRYPOINT_ADDRESS_V06) {
        const paymasterDataV06 = paymasterData;
        return {
            callGasLimit: BigInt(gas.callGasLimit),
            verificationGasLimit: BigInt(gas.verificationGasLimit),
            preVerificationGas: BigInt(gas.preVerificationGas),
            paymasterAndData: paymasterDataV06?.paymasterAndData,
            maxFeePerGas: BigInt(userOperation.maxFeePerGas),
            maxPriorityFeePerGas: BigInt(userOperation.maxPriorityFeePerGas)
        };
    }
    const stubDataV07 = stubData;
    const paymasterDataV07 = paymasterData;
    return {
        callGasLimit: BigInt(gas.callGasLimit),
        verificationGasLimit: BigInt(gas.verificationGasLimit),
        preVerificationGas: BigInt(gas.preVerificationGas),
        paymaster: paymasterDataV07.paymaster,
        paymasterData: paymasterDataV07.paymasterData,
        paymasterVerificationGasLimit: stubDataV07.paymasterVerificationGasLimit &&
            BigInt(stubDataV07.paymasterVerificationGasLimit),
        paymasterPostOpGasLimit: stubDataV07?.paymasterPostOpGasLimit &&
            BigInt(stubDataV07.paymasterPostOpGasLimit),
        maxFeePerGas: BigInt(userOperation.maxFeePerGas),
        maxPriorityFeePerGas: BigInt(userOperation.maxPriorityFeePerGas)
    };
};
//# sourceMappingURL=sponsorUserOperationEip7677.js.map