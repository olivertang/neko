import { type SendUserOperationParameters } from "permissionless/actions/smartAccount";
import type { EntryPoint, Prettify } from "permissionless/types";
import { type Chain, type Client, type Hash, type Transport } from "viem";
import type { KernelSmartAccount } from "../../accounts/index.js";
import type { KernelValidator, KernelValidatorHook } from "../../types/kernel.js";
type OptionalUserOperationParameters<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends KernelSmartAccount<entryPoint, TTransport, TChain> | undefined = KernelSmartAccount<entryPoint, TTransport, TChain> | undefined> = Omit<SendUserOperationParameters<entryPoint, TTransport, TChain, TAccount>, "userOperation"> & {
    userOperation?: SendUserOperationParameters<entryPoint, TTransport, TChain, TAccount>["userOperation"];
};
export type ChangeSudoValidatorParameters<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends KernelSmartAccount<entryPoint, TTransport, TChain> | undefined = KernelSmartAccount<entryPoint, TTransport, TChain> | undefined> = Prettify<OptionalUserOperationParameters<entryPoint, TTransport, TChain, TAccount> & {
    sudoValidator: KernelValidator<entryPoint, string>;
    hook?: KernelValidatorHook;
}>;
export declare function changeSudoValidator<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends KernelSmartAccount<entryPoint, TTransport, TChain> | undefined = KernelSmartAccount<entryPoint, TTransport, TChain> | undefined>(client: Client<TTransport, TChain, TAccount>, args: Prettify<ChangeSudoValidatorParameters<entryPoint, TTransport, TChain, TAccount>>): Promise<Hash>;
export {};
//# sourceMappingURL=changeSudoValidator.d.ts.map