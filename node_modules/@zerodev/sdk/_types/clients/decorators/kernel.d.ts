import { type BundlerClient, type SmartAccountActions } from "permissionless";
import type { Middleware } from "permissionless/actions/smartAccount";
import type { EntryPoint, Prettify } from "permissionless/types";
import type { StateOverrides } from "permissionless/types/bundler";
import type { Chain, Client, Hash, Transport } from "viem";
import type { KernelSmartAccount } from "../../accounts/index.js";
import { type GetKernelV3ModuleCurrentNonceParameters } from "../../actions/account-client/getKernelV3ModuleCurrentNonce.js";
import { type GetUserOperationGasPriceReturnType } from "../../actions/account-client/getUserOperationGasPrice.js";
import { type InvalidateNonceParameters } from "../../actions/account-client/invalidateNonce.js";
import type { ChangeSudoValidatorParameters, SignUserOperationReturnType, SponsorUserOperationEip7677Parameters, SponsorUserOperationEip7677ReturnType, UninstallPluginParameters } from "../../actions/index.js";
import { signUserOperation } from "../../actions/index.js";
import { type EstimateGasInERC20Parameters, type EstimateGasInERC20ReturnType } from "../../actions/paymaster/estimateGasInERC20.js";
import { type SponsorUserOperationParameters, type SponsorUserOperationReturnType } from "../../actions/paymaster/sponsorUserOperation.js";
export type ZeroDevPaymasterClientActions<entryPoint extends EntryPoint> = {
    /**
     * Returns paymasterAndData & updated gas parameters required to sponsor a userOperation.
     */
    sponsorUserOperation: (args: SponsorUserOperationParameters<entryPoint>) => Promise<SponsorUserOperationReturnType<entryPoint>>;
    estimateGasInERC20: (args: EstimateGasInERC20Parameters) => Promise<EstimateGasInERC20ReturnType>;
    sponsorUserOperationEip7677: (args: SponsorUserOperationEip7677Parameters<entryPoint>, bundlerClient: BundlerClient<entryPoint>, stateOverrides?: StateOverrides) => Promise<SponsorUserOperationEip7677ReturnType<entryPoint>>;
};
export declare const zerodevPaymasterActions: <entryPoint extends EntryPoint>(entryPointAddress: entryPoint) => (client: Client) => ZeroDevPaymasterClientActions<entryPoint>;
export type KernelAccountClientActions<entryPoint extends EntryPoint, TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends KernelSmartAccount<entryPoint, TTransport, TChain> | undefined = KernelSmartAccount<entryPoint, TTransport, TChain> | undefined> = SmartAccountActions<entryPoint, TTransport, TChain, TSmartAccount> & {
    /**
     * Signs a user operation with the given transport, chain, and smart account.
     *
     * @param args - Parameters for the signUserOperation function
     * @returns A promise that resolves to the result of the signUserOperation function
     */
    signUserOperation: <TTransport extends Transport>(args: Parameters<typeof signUserOperation<entryPoint, TTransport, TChain, TSmartAccount>>[1]) => Promise<SignUserOperationReturnType<entryPoint>>;
    /**
     * Returns the live gas prices that you can use to send a user operation.
     *
     * @returns maxFeePerGas & maxPriorityFeePerGas {@link GetUserOperationGasPriceReturnType}
     */
    getUserOperationGasPrice: () => Promise<Prettify<GetUserOperationGasPriceReturnType>>;
    /**
     * Creates, signs, and sends an uninstall kernel plugin transaction to the network.
     * This function also allows you to sponsor this transaction if sender is a smartAccount
     *
     *
     * @param args - {@link UninstallPermissionParameters}
     * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}
     */
    uninstallPlugin: (args: UninstallPluginParameters<entryPoint, TTransport, TChain, TSmartAccount>) => Promise<Hash>;
    /**
     * Creates, signs, and sends a user operation to change sudo validator to the network.
     * This function also allows you to sponsor this transaction if sender is a smartAccount
     */
    changeSudoValidator: (args: ChangeSudoValidatorParameters<entryPoint, TTransport, TChain, TSmartAccount>) => Promise<Hash>;
    /**
     * Creates, signs, and sends a kernel v3 module nonce invalidation transaction to the network.
     * This function also allows you to sponsor this transaction if sender is a smartAccount
     *
     *
     * @param args - {@link InvalidateNonceParameters}
     * @returns The [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) hash. {@link SendTransactionReturnType}
     */
    invalidateNonce: <TChainOverride extends Chain | undefined = Chain | undefined>(args: InvalidateNonceParameters<entryPoint, TTransport, TChain, TSmartAccount, TChainOverride>) => Promise<Hash>;
    /**
     * Creates, signs, and sends a transaction to fetch KernelV3 module nonce to the network.
     * This function also allows you to sponsor this transaction if sender is a smartAccount
     *
     *
     * @param args - {@link GetKernelV3ModuleCurrentNonceParameters}
     * @returns nonce
     */
    getKernelV3ModuleCurrentNonce: <TChainOverride extends Chain | undefined = Chain | undefined>(args: GetKernelV3ModuleCurrentNonceParameters<entryPoint, TTransport, TChain, TSmartAccount, TChainOverride>) => Promise<number>;
};
export declare function kernelAccountClientActions<entryPoint extends EntryPoint>({ middleware }: Middleware<entryPoint>): <TTransport extends Transport, TChain extends Chain | undefined = Chain | undefined, TSmartAccount extends KernelSmartAccount<entryPoint, TTransport, TChain> | undefined = KernelSmartAccount<entryPoint, TTransport, TChain> | undefined>(client: Client<TTransport, TChain, TSmartAccount>) => KernelAccountClientActions<entryPoint, TTransport, TChain, TSmartAccount>;
//# sourceMappingURL=kernel.d.ts.map