import { type SmartAccount } from "permissionless/accounts";
import type { EntryPoint } from "permissionless/types";
import { type Address, type Chain, type Client, type Hex, type PublicActions, type PublicRpcSchema, type Transport } from "viem";
import type { GetKernelVersion, KernelEncodeCallDataArgs, KernelPluginManager, KernelPluginManagerParams } from "../../types/kernel.js";
export type KernelSmartAccount<entryPoint extends EntryPoint, transport extends Transport = Transport, chain extends Chain | undefined = Chain | undefined> = SmartAccount<entryPoint, "kernelSmartAccount", transport, chain> & {
    kernelVersion: GetKernelVersion<entryPoint>;
    kernelPluginManager: KernelPluginManager<entryPoint>;
    getNonce: (customNonceKey?: bigint) => Promise<bigint>;
    generateInitCode: () => Promise<Hex>;
    encodeCallData: (args: KernelEncodeCallDataArgs) => Promise<Hex>;
    encodeModuleInstallCallData: () => Promise<Hex>;
};
export type CreateKernelAccountParameters<entryPoint extends EntryPoint, KernelVerion extends GetKernelVersion<entryPoint>> = {
    plugins: Omit<KernelPluginManagerParams<entryPoint>, "entryPoint" | "kernelVersion"> | KernelPluginManager<entryPoint>;
    entryPoint: entryPoint;
    index?: bigint;
    factoryAddress?: Address;
    accountImplementationAddress?: Address;
    metaFactoryAddress?: Address;
    deployedAccountAddress?: Address;
    kernelVersion: GetKernelVersion<entryPoint>;
    initConfig?: KernelVerion extends "0.3.1" ? Hex[] : never;
    useMetaFactory?: boolean;
    chainId?: number;
};
/**
 * Default addresses for kernel smart account
 */
export declare const KERNEL_ADDRESSES: {
    ACCOUNT_LOGIC_V0_6: Address;
    ACCOUNT_LOGIC_V0_7: Address;
    FACTORY_ADDRESS_V0_6: Address;
    FACTORY_ADDRESS_V0_7: Address;
    FACTORY_STAKER: Address;
};
/**
 * Build a kernel smart account from a private key, that use the ECDSA signer behind the scene
 * @param client
 * @param privateKey
 * @param entryPoint
 * @param index
 * @param factoryAddress
 * @param accountImplementationAddress
 * @param ecdsaValidatorAddress
 * @param deployedAccountAddress
 */
export declare function createKernelAccount<entryPoint extends EntryPoint, KernelVersion extends GetKernelVersion<entryPoint>, TTransport extends Transport, TChain extends Chain | undefined>(client: Client<TTransport, TChain, undefined, PublicRpcSchema, PublicActions<TTransport, TChain>>, { plugins, entryPoint: entryPointAddress, index, factoryAddress: _factoryAddress, accountImplementationAddress: _accountImplementationAddress, metaFactoryAddress: _metaFactoryAddress, deployedAccountAddress, kernelVersion, initConfig, useMetaFactory, chainId }: CreateKernelAccountParameters<entryPoint, KernelVersion>): Promise<KernelSmartAccount<entryPoint, TTransport, TChain>>;
//# sourceMappingURL=createKernelAccount.d.ts.map